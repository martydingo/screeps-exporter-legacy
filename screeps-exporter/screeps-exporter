#!/usr/bin/env python3
from screepsapi import API
from argparse import ArgumentParser
import prometheus_client as promc
import yaml, time, requests

promc.REGISTRY.unregister(promc.GC_COLLECTOR)
promc.REGISTRY.unregister(promc.PLATFORM_COLLECTOR)
promc.REGISTRY.unregister(promc.PROCESS_COLLECTOR)


class screepsExporter:
    def __init__(self, configurationPath):
        self.configuration = self.loadConfiguration(configurationPath)
        self.serverConfiguration = self.configuration["server"]
        if self.serverConfiguration["host"]:
            serverHost = self.serverConfiguration["host"]
            self.serverName = str(self.serverConfiguration["server_name"]).replace(
                "-", "_"
            )
        else:
            serverHost = "server1.screepspl.us:443"
            self.serverName = "official"
        self.setupApiConnection(serverHost)
        self.screepsMemory = self.ScreepsApiConnection.memory(
            shard=self.serverConfiguration["shard"]
        )["data"]
        exports = self.createExports()
        while True:
            try:
                self.screepsMemory = self.ScreepsApiConnection.memory(
                    shard=self.serverConfiguration["shard"]
                )["data"]
                self.generateMetrics(exports)
                time.sleep(int(self.configuration["scrape_interval"]))

            except KeyboardInterrupt:
                quit()
            
            except requests.exceptions.ConnectTimeout as e:
                print(f"Timeout connecting to {serverHost}: {e}, ")
                time.sleep(int(self.configuration["scrape_interval"]))

            except requests.exceptions.ConnectionError as e:
                print(f"Error connecting to {serverHost}: {e}, retrying..")
                time.sleep(int(self.configuration["scrape_interval"]))

    def setupApiConnection(self, serverHost):
        try: 
            self.createApiConnection(serverHost)
        except requests.exceptions.ConnectTimeout as e:
            print(f"Timeout connecting to {serverHost}: {e}, ")
            time.sleep(int(self.configuration["scrape_interval"]))
            self.setupApiConnection(serverHost)
        except requests.exceptions.ConnectionError as e:
            print(f"Error connecting to {serverHost}: {e}, retrying..")
            time.sleep(int(self.configuration["scrape_interval"]))
            self.setupApiConnection(serverHost)

    def createApiConnection(self, serverHost):

        if self.serverConfiguration["token"]:
            self.ScreepsApiConnection = API(
                token=self.serverConfiguration["token"],
                host=serverHost,
                secure=self.serverConfiguration["secure"],
            )
        else:
            self.ScreepsApiConnection = API(
                self.serverConfiguration["username"],
                self.serverConfiguration["password"],
                host=serverHost,
                secure=self.serverConfiguration["secure"],
            )

    def loadConfiguration(self, configurationPath):
        return yaml.safe_load(open(configurationPath, "r"))

    def createExports(self):

        self.creepJobTypes = []
        self.creepRooms = []
        for creep in self.screepsMemory["creeps"]:
            creepjobType = self.screepsMemory["creeps"][creep]["jobType"]
            creepRoom = self.screepsMemory["creeps"][creep]["room"]
            self.creepJobTypes.append(creepjobType)
            self.creepRooms.append(creepRoom)

        exports = {}

        # Game Time

        exports["SCREEPS_GAME_TIME"] = promc.Gauge(
            "screeps_game_time",
            "The current time in ticks the shard is reporting",
            ["server"],
        )
        exports["SCREEPS_GAME_TIME"].labels(server=self.serverName)

        # Game CPU

        exports["SCREEPS_GAME_CPU"] = promc.Gauge(
            "screeps_game_cpu",
            "The current CPU used in the last tick",
            ["server"],
        )
        exports["SCREEPS_GAME_CPU"].labels(server=self.serverName)

        # Game CPU Bucket

        exports["SCREEPS_GAME_CPU_BUCKET"] = promc.Gauge(
            "screeps_game_cpu_bucket",
            "The current amount of CPU in the CPU Bucket",
            ["server"],
        )
        exports["SCREEPS_GAME_CPU_BUCKET"].labels(server=self.serverName)

        # Game Memory

        exports["SCREEPS_GAME_MEMORY"] = promc.Gauge(
            "screeps_game_memory",
            "The current amount of memory used",
            ["server"],
        )
        exports["SCREEPS_GAME_MEMORY"].labels(server=self.serverName)

        # Game Pixels
        exports["SCREEPS_GAME_PIXELS"] = promc.Gauge(
            "screeps_game_pixels",
            "The current pixel amount held",
            ["server"],
        )
        exports["SCREEPS_GAME_PIXELS"].labels(server=self.serverName)

        # Creep Count by Job Type

        exports["SCREEPS_CREEPS_COUNT_JOBTYPE"] = promc.Gauge(
            "screeps_creeps_count_jobtype",
            "total number of creeps alive by jobtype (polled by the count of creeps in Memory.creeps)",
            ["jobType", "server", "room"],
        )
        for room in self.creepRooms:
            for creepJobType in self.creepJobTypes:
                exports["SCREEPS_CREEPS_COUNT_JOBTYPE"].labels(
                    jobType=creepJobType, server=self.serverName, room=room
                )

        # Creep Count by Room

        exports["SCREEPS_CREEPS_COUNT_ROOM"] = promc.Gauge(
            "screeps_creeps_count_room",
            "total number of creeps alive by room (polled by the count of creeps in Memory.creeps)",
            ["room", "server"],
        )
        for creepRoom in self.creepRooms:
            exports["SCREEPS_CREEPS_COUNT_ROOM"].labels(
                room=creepRoom, server=self.serverName
            )

        # Job Queue Length

        exports["SCREEPS_JOB_QUEUE_COUNT"] = promc.Gauge(
            "screeps_job_queue_count", "number of jobs in the job queue", ["server"]
        )
        exports["SCREEPS_JOB_QUEUE_COUNT"].labels(server=self.serverName)

        # self.queues_jobs_count_jobType
        # self.queues_jobs_count_jobParameters_room
        # self.queues_jobs[]_jobType_timeAdded

        # Spawn Queue Length

        exports["SCREEPS_SPAWN_QUEUE_COUNT"] = promc.Gauge(
            "screeps_spawn_queue_count",
            "number of jobs waiting in the spawn queue",
            ["server"],
        )
        exports["SCREEPS_SPAWN_QUEUE_COUNT"].labels(server=self.serverName)

        # Room Count Length

        exports["SCREEPS_ROOM_COUNT"] = promc.Gauge(
            "screeps_room_count", "number of rooms in Memory.rooms", ["server"]
        )
        exports["SCREEPS_ROOM_COUNT"].labels(server=self.serverName)

        # Construction Site Count

        exports["SCREEPS_CONSTRUCTION_SITE_COUNT"] = promc.Gauge(
            "screeps_construction_site_count",
            "number of construction sites, grouped by room",
            ["room", "server"],
        )

        for creepRoom in self.creepRooms:
            exports["SCREEPS_CONSTRUCTION_SITE_COUNT"].labels(
                room=creepRoom, server=self.serverName
            )

        # Dropped Resource Count

        exports["SCREEPS_DROPPED_RESOURCE_COUNT"] = promc.Gauge(
            "screeps_dropped_resource_count",
            "number of dropped resource, grouped by room",
            ["room", "server"],
        )

        for creepRoom in self.creepRooms:
            exports["SCREEPS_DROPPED_RESOURCE_COUNT"].labels(
                room=creepRoom, server=self.serverName
            )

        # Link Energy
        exports["SCREEPS_LINK_ENERGY"] = promc.Gauge(
            "screeps_link_energy",
            "number of dropped resource, grouped by room",
            ["room", "server", "link"],
        )

        for creepRoom in self.creepRooms:
            try:
                # print(self.screepsMemory["rooms"][creepRoom]["monitoring"]["structures"]["links"])
                for link in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                    "structures"
                ]["links"]:
                    exports["SCREEPS_LINK_ENERGY"].labels(
                        room=creepRoom, server=self.serverName, link=link
                    )
            except KeyError:
                print(f"No links detected in {creepRoom}, skipping")

        # Spawn Energy Maximums, Minimums, Averages, Current & Capacity

        exports["SCREEPS_SPAWN_ENERGY_MAXIMUM"] = promc.Gauge(
            "screeps_spawn_energy_maximum",
            "maximum amount of spawn energy observed in the room over 100 ticks",
            ["room", "server"],
        )

        exports["SCREEPS_SPAWN_ENERGY_MINIMUM"] = promc.Gauge(
            "screeps_spawn_energy_minimum",
            "minimum amount of spawn energy observed in the room over 100 ticks",
            ["room", "server"],
        )

        exports["SCREEPS_SPAWN_ENERGY_AVERAGE"] = promc.Gauge(
            "screeps_spawn_energy_average",
            "average amount of spawn energy observed in the room over 100 ticks",
            ["room", "server"],
        )

        exports["SCREEPS_SPAWN_ENERGY_CURRENT"] = promc.Gauge(
            "screeps_spawn_energy_current",
            "the current amount of spawn energy observed in the room at this current tick",
            ["room", "server"],
        )

        exports["SCREEPS_SPAWN_ENERGY_CAPACITY"] = promc.Gauge(
            "screeps_spawn_energy_capacity",
            "the current amount of spawn energy observed in the room at this current tick",
            ["room", "server"],
        )

        for creepRoom in self.creepRooms:
            exports["SCREEPS_SPAWN_ENERGY_MAXIMUM"].labels(
                room=creepRoom, server=self.serverName
            )
            exports["SCREEPS_SPAWN_ENERGY_MINIMUM"].labels(
                room=creepRoom, server=self.serverName
            )
            exports["SCREEPS_SPAWN_ENERGY_AVERAGE"].labels(
                room=creepRoom, server=self.serverName
            )
            exports["SCREEPS_SPAWN_ENERGY_CURRENT"].labels(
                room=creepRoom, server=self.serverName
            )
            exports["SCREEPS_SPAWN_ENERGY_CAPACITY"].labels(
                room=creepRoom, server=self.serverName
            )

        # Hostiles Count

        exports["SCREEPS_HOSTILE_COUNT"] = promc.Gauge(
            "screeps_hostile_count",
            "number of hostiles, grouped by room",
            ["room", "server"],
        )

        for creepRoom in self.creepRooms:
            exports["SCREEPS_HOSTILE_COUNT"].labels(
                room=creepRoom, server=self.serverName
            )

        # Hostiles Owner
        exports["SCREEPS_HOSTILES_OWNER"] = promc.Gauge(
            "screeps_hostiles_owner",
            "all hostiles, grouped by room & owner",
            ["room", "server", "owner"],
        )

        for creepRoom in self.creepRooms:
            owners = []
            for hostile in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                "hostiles"
            ]:
                owners.append(
                    self.screepsMemory["rooms"][creepRoom]["monitoring"]["hostiles"][
                        hostile
                    ]["owner"]
                )
            for owner in owners:
                exports["SCREEPS_HOSTILES_OWNER"].labels(
                    room=creepRoom, server=self.serverName, owner=owner
                )

        # Mineral Amount Amount
        try:
            exports["SCREEPS_MINERAL_AMOUNT"] = promc.Gauge(
                "screeps_mineral_amount",
                "the energy capacity of all sources, grouped by room",
                ["room", "server", "mineral"],
            )

            for creepRoom in self.creepRooms:
                for mineral in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                    "minerals"
                ]:
                    mineralType = self.screepsMemory["rooms"][creepRoom]["monitoring"][
                    "minerals"][mineral]["mineralType"]
                    exports["SCREEPS_MINERAL_AMOUNT"].labels(
                        room=creepRoom, server=self.serverName, mineral=mineralType
                    )
        except KeyError:
            print(f"No minerals detected in room {room}, skipping mineral checks")

        # Source Energy Capacity

        exports["SCREEPS_SOURCE_ENERGY_CAPACITY"] = promc.Gauge(
            "screeps_source_energy_capacity",
            "the energy capacity of all sources, grouped by room",
            ["room", "server", "source"],
        )

        for creepRoom in self.creepRooms:
            for source in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                "sources"
            ]:
                exports["SCREEPS_SOURCE_ENERGY_CAPACITY"].labels(
                    room=creepRoom, server=self.serverName, source=source
                )

        # Source Energy Remaining

        exports["SCREEPS_SOURCE_ENERGY_REMAINING"] = promc.Gauge(
            "screeps_source_energy_remaining",
            "the energy capacity of all sources, grouped by room",
            ["room", "server", "source"],
        )

        for creepRoom in self.creepRooms:
            for source in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                "sources"
            ]:
                exports["SCREEPS_SOURCE_ENERGY_REMAINING"].labels(
                    room=creepRoom, server=self.serverName, source=source
                )

        # Controller progress, nextLevel, downgrade, safeMode and safeModeCooldown

        exports["SCREEPS_CONTROLLER_PROGRESS"] = promc.Gauge(
            "screeps_controller_progress",
            "progress of the upgrading the room controller to the next RCL",
            ["room", "server"],
        )

        exports["SCREEPS_CONTROLLER_NEXT_LEVEL"] = promc.Gauge(
            "screeps_controller_next_level",
            "the number of points required to upgrade the room controller to the next RCL",
            ["room", "server"],
        )

        exports["SCREEPS_CONTROLLER_DOWNGRADE"] = promc.Gauge(
            "screeps_controller_downgrade",
            "number of ticks before the room controller downgrades to the previous RC:",
            ["room", "server"],
        )

        exports["SCREEPS_CONTROLLER_SAFE_MODE"] = promc.Enum(
            "screeps_controller_safe_mode",
            "whether the room controller is in safe mode or not",
            ["room", "server"],
            states=["True", "False"],
        )

        exports["SCREEPS_CONTROLLER_SAFE_MODE_COOLDOWN"] = promc.Gauge(
            "screeps_controller_safe_mode_cooldown",
            "the cooldown of safe mode if active",
            ["room", "server"],
        )

        for creepRoom in self.creepRooms:
            exports["SCREEPS_CONTROLLER_PROGRESS"].labels(
                room=creepRoom, server=self.serverName
            )
            exports["SCREEPS_CONTROLLER_NEXT_LEVEL"].labels(
                room=creepRoom, server=self.serverName
            )
            exports["SCREEPS_CONTROLLER_DOWNGRADE"].labels(
                room=creepRoom, server=self.serverName
            )
            exports["SCREEPS_CONTROLLER_SAFE_MODE"].labels(
                room=creepRoom, server=self.serverName
            )
            exports["SCREEPS_CONTROLLER_SAFE_MODE_COOLDOWN"].labels(
                room=creepRoom, server=self.serverName
            )

        # Storage Contents

        exports["SCREEPS_STORAGE_CONTENTS"] = promc.Gauge(
            "screeps_storage_contents",
            "contents of storage, grouped by room & resource",
            ["room", "server", "resource"],
        )

        for creepRoom in self.creepRooms:
            try:
                for resource in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                    "structures"
                ]["storage"]["resources"]:
                    exports["SCREEPS_STORAGE_CONTENTS"].labels(
                        room=creepRoom, server=self.serverName, resource=resource
                    )
            except KeyError:
                # print("Storage Contents: no storage, skipping")
                pass

        # Terminal Contents

        exports["SCREEPS_TERMINAL_CONTENTS"] = promc.Gauge(
            "screeps_terminal_contents",
            "contents of terminal, grouped by room & resource",
            ["room", "server", "resource"],
        )

        for creepRoom in self.creepRooms:
            try:
                for resource in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                    "structures"
                ]["terminal"]["resources"]:
                    exports["SCREEPS_TERMINAL_CONTENTS"].labels(
                        room=creepRoom, server=self.serverName, resource=resource
                    )
            except KeyError:
                # print("Terminal Contents: no terminal, skipping")
                pass

        # Factory Contents

        exports["SCREEPS_FACTORY_CONTENTS"] = promc.Gauge(
            "screeps_factory_contents",
            "contents of factory, grouped by room & resource",
            ["room", "server", "resource"],
        )

        for creepRoom in self.creepRooms:
            try:
                for resource in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                    "structures"
                ]["factory"]["resources"]:
                    exports["SCREEPS_FACTORY_CONTENTS"].labels(
                        room=creepRoom, server=self.serverName, resource=resource
                    )
            except KeyError:
                # print("Factory Contents: no factory, skipping")
                pass

        # Lab Contents

        exports["SCREEPS_LAB_CONTENTS"] = promc.Gauge(
            "screeps_lab_contents",
            "contents of lab, grouped by room & resource",
            ["room", "server", "lab", "resource"],
        )

        for creepRoom in self.creepRooms:
            try:
                for lab in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                    "structures"
                ]["labs"]:
                    for resource in self.screepsMemory["rooms"][creepRoom][
                        "monitoring"
                    ]["structures"]["labs"][lab]["resources"]:
                        exports["SCREEPS_LAB_CONTENTS"].labels(
                            room=creepRoom,
                            server=self.serverName,
                            lab=lab,
                            resource=resource,
                        )
            except KeyError:
                print(f"no lab or resources in lab in {creepRoom}, skipping")
                pass

        # Storage Capacity

        exports["SCREEPS_STORAGE_CAPACITY"] = promc.Gauge(
            "screeps_storage_capacity",
            "current capacity of storage, grouped by room & resource",
            ["room", "server", "resource"],
        )

        for creepRoom in self.creepRooms:
            try:
                for resource in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                    "structures"
                ]["storage"]["resources"]:
                    exports["SCREEPS_STORAGE_CAPACITY"].labels(
                        room=creepRoom, server=self.serverName, resource=resource
                    )
            except KeyError:
                print("Storage Capacity: no storage, skipping")
                pass

        # Road Count

        exports["SCREEPS_ROAD_COUNT"] = promc.Gauge(
            "screeps_road_count",
            "number of roads, grouped by room",
            ["room", "server"],
        )

        for creepRoom in self.creepRooms:
            exports["SCREEPS_ROAD_COUNT"].labels(room=creepRoom, server=self.serverName)

        # Spawn Count

        exports["SCREEPS_SPAWN_COUNT"] = promc.Gauge(
            "screeps_spawn_count",
            "number of spawns, grouped by room",
            ["room", "server"],
        )

        for creepRoom in self.creepRooms:
            exports["SCREEPS_SPAWN_COUNT"].labels(
                room=creepRoom, server=self.serverName
            )

        # Spawns Spawning

        exports["SCREEPS_SPAWNS_SPAWNING"] = promc.Enum(
            "screeps_spawns_spawning",
            "spawns which are spawning, grouped by room",
            ["room", "server", "spawn"],
            states=["True", "False"],
        )

        for creepRoom in self.creepRooms:
            for spawn in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                "structures"
            ]["spawns"]:
                exports["SCREEPS_SPAWNS_SPAWNING"].labels(
                    room=creepRoom, server=self.serverName, spawn=spawn
                )

        # Extensions Count

        exports["SCREEPS_EXTENSION_COUNT"] = promc.Gauge(
            "screeps_extension_count",
            "number of extensions, grouped by room",
            ["room", "server"],
        )

        for creepRoom in self.creepRooms:
            exports["SCREEPS_EXTENSION_COUNT"].labels(
                room=creepRoom, server=self.serverName
            )

        # Tower Energy

        exports["SCREEPS_TOWER_ENERGY"] = promc.Gauge(
            "screeps_tower_energy",
            "amount of energy in towers, grouped by room & tower",
            ["room", "server", "tower"],
        )

        for creepRoom in self.creepRooms:
            for tower in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                "structures"
            ]["towers"]:
                exports["SCREEPS_TOWER_ENERGY"].labels(
                    room=creepRoom, server=self.serverName, tower=tower
                )

        # Other Structures Count

        exports["SCREEPS_OTHER_STRUCTURES_COUNT"] = promc.Gauge(
            "screeps_other_structures_count",
            "number of structures not catergorised, grouped by room",
            ["room", "server"],
        )

        for creepRoom in self.creepRooms:
            exports["SCREEPS_OTHER_STRUCTURES_COUNT"].labels(
                room=creepRoom, server=self.serverName
            )

        # Profiler

        exports["SCREEPS_PROFILER_TOTAL_CALLS"] = promc.Gauge(
            "screeps_profiler_total_calls",
            "the total number of calls to each class:function pair, harvested from screeps-typescript-profiler at Memory.profiler",
            ["className", "server"],
        )

        for className in self.screepsMemory["profiler"]["data"]:
            exports["SCREEPS_PROFILER_TOTAL_CALLS"].labels(
                className=className, server=self.serverName
            )

        exports["SCREEPS_PROFILER_CPU_PER_CALL"] = promc.Gauge(
            "screeps_profiler_cpu_per_call",
            "the number of CPU used per each call to the class:function pair, harvested from screeps-typescript-profiler at Memory.profiler",
            ["className", "server"],
        )

        for className in self.screepsMemory["profiler"]["data"]:
            exports["SCREEPS_PROFILER_CPU_PER_CALL"].labels(
                className=className, server=self.serverName
            )

        exports["SCREEPS_PROFILER_CALLS_PER_TICK"] = promc.Gauge(
            "screeps_profiler_calls_per_tick",
            "the contents of screeps-typescript-profiler at Memory.profiler",
            ["className", "server"],
        )

        for className in self.screepsMemory["profiler"]["data"]:
            exports["SCREEPS_PROFILER_CALLS_PER_TICK"].labels(
                className=className, server=self.serverName
            )

        exports["SCREEPS_PROFILER_CPU_PER_TICK"] = promc.Gauge(
            "screeps_profiler_cpu_per_tick",
            "the contents of screeps-typescript-profiler at Memory.profiler",
            ["className", "server"],
        )

        for className in self.screepsMemory["profiler"]["data"]:
            exports["SCREEPS_PROFILER_CPU_PER_TICK"].labels(
                className=className, server=self.serverName
            )
            

        return exports

    def generateMetrics(self, exports):
        # Game Time

        exports["SCREEPS_GAME_TIME"].labels(server=self.serverName).set(
            self.ScreepsApiConnection.time(shard=self.serverConfiguration["shard"])
        )
        try:
            # Game CPU
            exports["SCREEPS_GAME_CPU"].labels(server=self.serverName).set(
                self.screepsMemory["monitoring"]["cpu"]["used"]
            )

            # Game CPU Bucket
            exports["SCREEPS_GAME_CPU_BUCKET"].labels(server=self.serverName).set(
                self.screepsMemory["monitoring"]["cpu"]["bucket"]
            )

            # Game Memory
            exports["SCREEPS_GAME_MEMORY"].labels(server=self.serverName).set(
                self.screepsMemory["monitoring"]["memory"]
            )

            # Game Pixels
            exports["SCREEPS_GAME_PIXELS"].labels(server=self.serverName).set(
                self.screepsMemory["monitoring"]["pixels"]
            )
        except KeyError:
            pass

        # Creeps by Job Type

        for creepJobType in self.creepJobTypes:
            for creepRoom in self.creepRooms:
                jobTypeCounter = 0
                for Creep in self.screepsMemory["creeps"]:
                    if (
                        self.screepsMemory["creeps"][Creep]["jobType"] == creepJobType
                        and self.screepsMemory["creeps"][Creep]["room"] == creepRoom
                    ):
                        jobTypeCounter = jobTypeCounter + 1

                exports["SCREEPS_CREEPS_COUNT_JOBTYPE"].labels(
                    jobType=creepJobType, server=self.serverName, room=creepRoom
                ).set(jobTypeCounter)

        # Creep Count by Room

        for creepRoom in self.creepRooms:
            roomCounter = 0
            for Creep in self.screepsMemory["creeps"]:
                if self.screepsMemory["creeps"][Creep]["room"] == creepRoom:
                    roomCounter = roomCounter + 1

            exports["SCREEPS_CREEPS_COUNT_ROOM"].labels(
                room=creepRoom, server=self.serverName
            ).set(roomCounter)

        # Job Queue Length
        try:
            exports["SCREEPS_JOB_QUEUE_COUNT"].labels(server=self.serverName).set(
                len(self.screepsMemory["queues"]["jobs"])
            )
        except KeyError:
            exports["SCREEPS_JOB_QUEUE_COUNT"].labels(server=self.serverName).set(
                len(self.screepsMemory["queues"]["jobQueue"])
            )
            
        # Spawn Queue Length
        try:
            exports["SCREEPS_SPAWN_QUEUE_COUNT"].labels(server=self.serverName).set(
                len(self.screepsMemory["queues"]["spawn"])
            )
        except KeyError:
            exports["SCREEPS_SPAWN_QUEUE_COUNT"].labels(server=self.serverName).set(
                len(self.screepsMemory["queues"]["spawnQueue"])
            )


        # Room Count

        exports["SCREEPS_ROOM_COUNT"].labels(server=self.serverName).set(
            len(self.screepsMemory["rooms"])
        )

        # Construction Site Count

        for creepRoom in self.creepRooms:
            exports["SCREEPS_CONSTRUCTION_SITE_COUNT"].labels(
                room=creepRoom, server=self.serverName
            ).set(
                len(
                    self.screepsMemory["rooms"][creepRoom]["monitoring"][
                        "constructionSites"
                    ]
                )
            )

        # Dropped Resource Count

        for creepRoom in self.creepRooms:
            exports["SCREEPS_DROPPED_RESOURCE_COUNT"].labels(
                room=creepRoom, server=self.serverName
            ).set(
                len(
                    self.screepsMemory["rooms"][creepRoom]["monitoring"][
                        "droppedResources"
                    ]
                )
            )

            # Link Energy
            for creepRoom in self.creepRooms:
                try:
                    # print(self.screepsMemory["rooms"][creepRoom]["monitoring"]["structures"]["links"])
                    for link in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                        "structures"
                    ]["links"]:
                        exports["SCREEPS_LINK_ENERGY"].labels(
                            room=creepRoom, server=self.serverName, link=link
                        ).set(
                            self.screepsMemory["rooms"][creepRoom]["monitoring"][
                                "structures"
                            ]["links"][link]["energy"]["energyAvailable"]
                        )
                except KeyError:
                    print(f"No links detected in {creepRoom}, skipping")

        # Spawn Energy Maximums, Minimums & Averages

        for creepRoom in self.creepRooms:
            try:
                exports["SCREEPS_SPAWN_ENERGY_MAXIMUM"].labels(
                    room=creepRoom, server=self.serverName
                ).set(
                    self.screepsMemory["rooms"][creepRoom]["monitoring"]["energy"][
                        "maximumEnergyAvailable"
                    ]
                )
                exports["SCREEPS_SPAWN_ENERGY_MINIMUM"].labels(
                    room=creepRoom, server=self.serverName
                ).set(
                    self.screepsMemory["rooms"][creepRoom]["monitoring"]["energy"][
                        "minimumEnergyAvailable"
                    ]
                )
                exports["SCREEPS_SPAWN_ENERGY_AVERAGE"].labels(
                    room=creepRoom, server=self.serverName
                ).set(
                    self.screepsMemory["rooms"][creepRoom]["monitoring"]["energy"][
                        "averageEnergyAvailable"
                    ]
                )
                exports["SCREEPS_SPAWN_ENERGY_CURRENT"].labels(
                    room=creepRoom, server=self.serverName
                ).set(
                    self.screepsMemory["rooms"][creepRoom]["monitoring"]["energy"][
                        "history"
                    ][
                        str(
                            self.ScreepsApiConnection.time(
                                shard=self.serverConfiguration["shard"]
                            )
                            - self.configuration["currentTickOffset"]
                        )
                    ][
                        "energyAvailable"
                    ]
                )

                exports["SCREEPS_SPAWN_ENERGY_CAPACITY"].labels(
                    room=creepRoom, server=self.serverName
                ).set(
                    self.screepsMemory["rooms"][creepRoom]["monitoring"]["energy"][
                        "history"
                    ][
                        str(
                            self.ScreepsApiConnection.time(
                                shard=self.serverConfiguration["shard"]
                            )
                            - self.configuration["currentTickOffset"]
                        )
                    ][
                        "energyCapacity"
                    ]
                )
            except KeyError:
                print(
                    f"SCREEPS_SPAWN_ENERGY_MAXIMUM: no energy history in {creepRoom}, skipping"
                )

        # Hostiles Count

        for creepRoom in self.creepRooms:
            exports["SCREEPS_HOSTILE_COUNT"].labels(
                room=creepRoom, server=self.serverName
            ).set(len(self.screepsMemory["rooms"][creepRoom]["monitoring"]["hostiles"]))

        # Hostiles Owner

        for creepRoom in self.creepRooms:
            owners = []
            for hostile in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                "hostiles"
            ]:
                owners.append(
                    self.screepsMemory["rooms"][creepRoom]["monitoring"]["hostiles"][
                        hostile
                    ]["owner"]
                )
            for owner in owners:
                hostileOwnerCount = 0
                for hostile in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                    "hostiles"
                ]:
                    if (
                        owner
                        == self.screepsMemory["rooms"][creepRoom]["monitoring"][
                            "hostiles"
                        ][hostile]["owner"]
                    ):
                        hostileOwnerCount = hostileOwnerCount + 1

                exports["SCREEPS_HOSTILES_OWNER"].labels(
                    room=creepRoom, server=self.serverName, owner=owner
                ).set(hostileOwnerCount)

        # self.rooms[]_monitoring_hostiles[]_owner

        # Mineral Amount Amount
        try:
            for creepRoom in self.creepRooms:
                for mineral in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                    "minerals"
                ]:
                    mineralType = self.screepsMemory["rooms"][creepRoom]["monitoring"][
                    "minerals"][mineral]["mineralType"]
                    exports["SCREEPS_MINERAL_AMOUNT"].labels(
                        room=creepRoom, server=self.serverName, mineral=mineralType
                    ).set(self.screepsMemory["rooms"][creepRoom]["monitoring"][
                    "minerals"][mineral]["remainingMineral"])
        except KeyError:
            print(f"No minerals detected in room {room}, skipping mineral checks")

        # Source Energy Capacity

        for creepRoom in self.creepRooms:
            for source in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                "sources"
            ]:
                exports["SCREEPS_SOURCE_ENERGY_CAPACITY"].labels(
                    room=creepRoom, server=self.serverName, source=source
                ).set(
                    self.screepsMemory["rooms"][creepRoom]["monitoring"]["sources"][
                        source
                    ]["totalEnergy"]
                )

        # Source Energy Remaining

        for creepRoom in self.creepRooms:
            for source in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                "sources"
            ]:
                exports["SCREEPS_SOURCE_ENERGY_REMAINING"].labels(
                    room=creepRoom, server=self.serverName, source=source
                ).set(
                    self.screepsMemory["rooms"][creepRoom]["monitoring"]["sources"][
                        source
                    ]["remainingEnergy"]
                )

        # Controller progress, nextLevel, downgrade, safeMode and safeModeCooldown

        for creepRoom in self.creepRooms:
            try:
                exports["SCREEPS_CONTROLLER_PROGRESS"].labels(
                    room=creepRoom, server=self.serverName
                ).set(
                    self.screepsMemory["rooms"][creepRoom]["monitoring"]["structures"][
                        "controller"
                    ]["progress"]
                )

                exports["SCREEPS_CONTROLLER_NEXT_LEVEL"].labels(
                    room=creepRoom, server=self.serverName
                ).set(
                    self.screepsMemory["rooms"][creepRoom]["monitoring"]["structures"][
                        "controller"
                    ]["nextLevel"]
                )

                exports["SCREEPS_CONTROLLER_DOWNGRADE"].labels(
                    room=creepRoom, server=self.serverName
                ).set(
                    self.screepsMemory["rooms"][creepRoom]["monitoring"]["structures"][
                        "controller"
                    ]["downgrade"]
                )

                exports["SCREEPS_CONTROLLER_SAFE_MODE"].labels(
                    room=creepRoom, server=self.serverName
                ).state(
                    str(
                        self.screepsMemory["rooms"][creepRoom]["monitoring"][
                            "structures"
                        ]["controller"]["safeMode"]
                    )
                )
            except KeyError:
                print(
                    f"SCREEPS_CONTROLLER_PROGRESS: no controller in {creepRoom}, skipping"
                )

                ## Set SCREEPS_CONTROLLER_SAFE_MODE_COOLDOWN to 0 if no safemode active
                try:
                    if (
                        self.screepsMemory["rooms"][creepRoom]["monitoring"]["structures"][
                            "controller"
                        ]["safeMode"]
                        == False
                    ):
                        exports["SCREEPS_CONTROLLER_SAFE_MODE_COOLDOWN"].labels(
                            room=creepRoom, server=self.serverName
                        ).set(0)

                    else:

                        exports["SCREEPS_CONTROLLER_SAFE_MODE_COOLDOWN"].labels(
                            room=creepRoom, server=self.serverName
                        ).set(
                            self.screepsMemory["rooms"][creepRoom]["monitoring"][
                                "structures"
                            ]["controller"]["safeModeCooldown"]
                        )
                except KeyError:
                    print(
                           f"SCREEPS_CONTROLLER_SAFE_MODE_COOLDOWN: no controller in {creepRoom}, skipping"
                       )
        # Storage Contents

        for creepRoom in self.creepRooms:
            try:
                for resource in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                    "structures"
                ]["storage"]["resources"]:
                    exports["SCREEPS_STORAGE_CONTENTS"].labels(
                        room=creepRoom, server=self.serverName, resource=resource
                    ).set(
                        self.screepsMemory["rooms"][creepRoom]["monitoring"][
                            "structures"
                        ]["storage"]["resources"][resource]["resourceAmount"]
                    )
            except KeyError:
                print(f"SCREEPS_STORAGE_CONTENTS: no storage in {creepRoom}, skipping")

        # Terminal Contents
        for creepRoom in self.creepRooms:
            try:
                for resource in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                    "structures"
                ]["terminal"]["resources"]:
                    exports["SCREEPS_TERMINAL_CONTENTS"].labels(
                        room=creepRoom, server=self.serverName, resource=resource
                    ).set(
                        self.screepsMemory["rooms"][creepRoom]["monitoring"][
                            "structures"
                        ]["terminal"]["resources"][resource]["amount"]
                    )
            except KeyError:
                print(f"no terminal or resources in terminal in {creepRoom}, skipping")
                pass

        # Factory Contents
        for creepRoom in self.creepRooms:
            try:
                for resource in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                    "structures"
                ]["factory"]["resources"]:
                    exports["SCREEPS_FACTORY_CONTENTS"].labels(
                        room=creepRoom, server=self.serverName, resource=resource
                    ).set(
                        self.screepsMemory["rooms"][creepRoom]["monitoring"][
                            "structures"
                        ]["factory"]["resources"][resource]["amount"]
                    )
            except KeyError:
                print(f"no factory or resources in factory in {creepRoom}, skipping")
                pass

        # Lab Contents
        for creepRoom in self.creepRooms:
            try:
                for lab in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                    "structures"
                ]["labs"]:
                    for resource in self.screepsMemory["rooms"][creepRoom][
                        "monitoring"
                    ]["structures"]["labs"][lab]["resources"]:
                        exports["SCREEPS_LAB_CONTENTS"].labels(
                            room=creepRoom,
                            server=self.serverName,
                            lab=lab,
                            resource=resource,
                        ).set(
                            self.screepsMemory["rooms"][creepRoom]["monitoring"][
                                "structures"
                            ]["labs"][lab]["resources"][resource]["amount"]
                        )
            except KeyError:
                print(f"no lab or resources in lab in {creepRoom}, skipping")
                pass

        # Storage Capacity

        for creepRoom in self.creepRooms:
            try:
                for resource in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                    "structures"
                ]["storage"]["resources"]:
                    exports["SCREEPS_STORAGE_CAPACITY"].labels(
                        room=creepRoom, server=self.serverName, resource=resource
                    ).set(
                        self.screepsMemory["rooms"][creepRoom]["monitoring"][
                            "structures"
                        ]["storage"]["resources"][resource]["resourceCapacity"]
                    )
            except KeyError:
                print(f"SCREEPS_STORAGE_CAPACITY: no storage in {creepRoom}, skipping")

        # Road Count

        for creepRoom in self.creepRooms:
            try:
                exports["SCREEPS_ROAD_COUNT"].labels(
                    room=creepRoom, server=self.serverName
                ).set(
                    len(
                        self.screepsMemory["rooms"][creepRoom]["monitoring"][
                            "structures"
                        ]["roads"]
                    )
                )
            except KeyError:
                print(f"SCREEPS_ROAD_COUNT: no roads in {creepRoom}, skipping")

        # Spawn Count

        for creepRoom in self.creepRooms:
            exports["SCREEPS_SPAWN_COUNT"].labels(
                room=creepRoom, server=self.serverName
            ).set(
                len(
                    self.screepsMemory["rooms"][creepRoom]["monitoring"]["structures"][
                        "spawns"
                    ]
                )
            )
        # Spawns Spawning

        for creepRoom in self.creepRooms:
            for spawn in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                "structures"
            ]["spawns"]:
                exports["SCREEPS_SPAWNS_SPAWNING"].labels(
                    room=creepRoom, server=self.serverName, spawn=spawn
                ).state(
                    str(
                        self.screepsMemory["rooms"][creepRoom]["monitoring"][
                            "structures"
                        ]["spawns"][spawn]["spawning"]
                    )
                )

        # Extension Count

        for creepRoom in self.creepRooms:
            exports["SCREEPS_EXTENSION_COUNT"].labels(
                room=creepRoom, server=self.serverName
            ).set(
                len(
                    self.screepsMemory["rooms"][creepRoom]["monitoring"]["structures"][
                        "extensions"
                    ]
                )
            )

        # Tower Energy

        for creepRoom in self.creepRooms:
            for tower in self.screepsMemory["rooms"][creepRoom]["monitoring"][
                "structures"
            ]["towers"]:
                exports["SCREEPS_TOWER_ENERGY"].labels(
                    room=creepRoom, server=self.serverName, tower=tower
                ).set(
                    self.screepsMemory["rooms"][creepRoom]["monitoring"]["structures"][
                        "towers"
                    ][tower]["energy"]["energyAvailable"]
                )

        # Other Structures Count

        for creepRoom in self.creepRooms:
            exports["SCREEPS_OTHER_STRUCTURES_COUNT"].labels(
                room=creepRoom, server=self.serverName
            ).set(
                len(
                    self.screepsMemory["rooms"][creepRoom]["monitoring"]["structures"][
                        "other"
                    ]
                )
            )
        
        # Profiler
        try: 

            profilerDuration = self.ScreepsApiConnection.time(shard=self.serverConfiguration["shard"]) - self.screepsMemory["profiler"]["start"]

            for className in self.screepsMemory["profiler"]["data"]:
                exports["SCREEPS_PROFILER_TOTAL_CALLS"].labels(
                    className=className, server=self.serverName
                ).set(self.screepsMemory["profiler"]["data"][className]["calls"])

            for className in self.screepsMemory["profiler"]["data"]:
                exports["SCREEPS_PROFILER_CPU_PER_CALL"].labels(
                    className=className, server=self.serverName
                ).set(self.screepsMemory["profiler"]["data"][className]["time"] / self.screepsMemory["profiler"]["data"][className]["calls"])

            for className in self.screepsMemory["profiler"]["data"]:
                exports["SCREEPS_PROFILER_CALLS_PER_TICK"].labels(
                    className=className, server=self.serverName
                ).set(self.screepsMemory["profiler"]["data"][className]["calls"] / profilerDuration)

            for className in self.screepsMemory["profiler"]["data"]:
                exports["SCREEPS_PROFILER_CPU_PER_TICK"].labels(
                    className=className, server=self.serverName
                ).set(self.screepsMemory["profiler"]["data"][className]["time"] / profilerDuration)

        except KeyError:
            print("no profiling detected, skipping profiler polling")

if __name__ == "__main__":
    argumentParser = ArgumentParser(
        prog="screeps-exporter",
        description="This is a prometheus exporter for memory located in screeps",
        usage="./screeps-exporter --config /etc/screeps-exporter.yaml",
    )
    argumentParser.add_argument("-c", "--config", required=True)
    argumentParser.add_argument("-p", "--port", required=True)
    arguments = argumentParser.parse_args()
    # start_http_server(addr="10.2.2.225", port=880)
    promc.start_http_server(port=int(arguments.port))
    ScreepsExporter = screepsExporter(arguments.config)
